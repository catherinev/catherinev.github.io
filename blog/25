<!DOCTYPE html>
<html>
  <head>
    <title>Catheine V</title>
    <link data-turbolinks-track="true" href="/assets/reset.css?body=1" media="all" rel="stylesheet" />
<link data-turbolinks-track="true" href="/assets/style.css?body=1" media="all" rel="stylesheet" />
<link data-turbolinks-track="true" href="/assets/application.css?body=1" media="all" rel="stylesheet" />
    <link href='http://fonts.googleapis.com/css?family=Gafata' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Roboto:300italic,300,500' rel='stylesheet' type='text/css'>
  </head>

  <body>
    <h1>Catherine Vongsathorn</h1>
    <script src="/assets/jquery.js?body=1"></script>
<script src="/assets/jquery_ujs.js?body=1"></script>
<script src="/assets/turbolinks.js?body=1"></script>
<script src="/assets/highlightNav.js?body=1"></script>
<script src="/assets/application.js?body=1"></script>
<div class = "nav">
  <button id = "menu-icon">menu</button>
  <div><a href="/">Home</a></div>
  <div><a href="/about.html">About</a></div>
  <div><a href="/blog.html">Blog</a></div>
  <div><a href="/experience.html">Experience</a></div>
  <div><a href="/links.html">Links</a></div>
</div>
    
    <h2>Sunday, May 11, 2014</h2>
<div class = "post">
  <h3>Regular Expressions</h3>
  <h4>What are regular expressions?</h4>
			<p>Regular expressions, or RegExp, are used to search a string for a particular pattern of characters.  The search can be simple ("does the string contain 'Maru'?") or somewhat more complex ("does the string contain a 0 or 1 followed by any sequence of four numbers followed by lower-case letters?").</p>

			<h4>A simple example in Ruby</h4>
			<p>Suppose we want to know if a particular string contains 'Maru': </p>

			<code>
				/Maru/ =~ 'hello Maru' <em> => 6</em><br/>
				 'hello Maru' =~ /Maru/ <em> => 6</em><br/>
				 'I love a box' =~ /Maru/ <em> => nil</em><br/>
				 /maru/ =~ 'hello Maru' <em> => nil</em><br/>
			</code>
			<p>Some notes that follow from this example:</p>
			<ul>
				<li>Regular expressions open and close with a forward slash, /</li>
				<li>In regular expressions, alphanumeric characters represent themselves (unless they are preceeded by a backslash or a metacharacter*).</li>
				<li>The operator <codein>=~</codein> is used to search a string for a regular expression and returns the index of the first match it finds in the string (if it doesn't find a match, it returns <codein>nil</codein>).</li>
				<li>When using the <codein>=~</codein> operator, the order of the string and the regular expression doesn't matter.
				<li>Regular expressions are case sensitive.</li>
			</ul>
			<p style = "font-size: 0.8em">*The following are metacharacters: <codein style = "font-size: 1.25em">(, ), [, ], {, }, ., ?, +, *</codein></p>
			<h4>An example using metacharacters</h4>
			<p>Now let's look at a more complex example.</p>
			<code>
				regex = /[01]\d{4}[a-z]+/<br/><br/>
				regex =~ '13874ff' <em> => 0</em><br/>
				regex =~ '03874ff' <em> => 0</em><br/>
				regex =~ 'abc03874fjdwsH' <em> => 3</em><br/>
				regex =~ '03874' <em> => nil</em><br/>
				regex =~ '3874ff' <em> => nil</em><br/>
				regex =~ '1874fg' <em> => nil</em><br/>
			</code>
			<p>Although this regular expression looks a lot more complicated than the one in the previous example, it's not too hard to understand if you break it down.  First, let's figure out what all the different characters in the regular expression are doing:</p>
			<ul>
				<li>Square brackets mean "or".  So <codein>[01]</codein> searches for <codein>"0"</codein> or <codein>"1"</codein>.</li>
				<li><codein>\d</codein> means any digit, <codein>0-9</codein>.</li>
				<li><codein>{n}</codein> means <codein>n</codein> times.  So <codein>\d{4}</codein> searches for 4 digits in a row.</li>
				<li><codein>[a-z]</codein>: square brackets still mean "or", but this time there is a range inside the brackets.  So <codein>[a-z]</codein> searches for any lowercase letter.</li>
				<li><codein>+</codein> means "at least one time", so <codein>[a-z]+</codein> searches for at least one lowercase letter.</li>
			</ul>
			<p>This example hints at some of the more powerful functionalities provided by regular expressions.  For a full explanation of how to use all the metacharacters, see the resources linked below.</p>

			<h4>What else can you do with RegExp in Ruby?</h4>
			<p>In the examples above, the regular expressions were used to search a string for a pattern of characters.  Ruby also allows us to replace patterns within a string (see the <a href = "http://www.ruby-doc.org/core-2.1.1/String.html#method-i-gsub"><codein>#gsub</codein></a> method).  It is also possible to collect all regex matches in a string using <a href = "http://www.ruby-doc.org/core-2.1.1/String.html#method-i-scan"><codein>#scan</codein></a> (or to collect anything that doesn't match using <a href = "http://www.ruby-doc.org/core-2.1.1/String.html#method-i-split"><codein>#split</codein></a>).</p>
			
			<h4>Useful Resources</h4>
			<ul>
				<li><a href ="http://www.ruby-doc.org/core-2.1.1/Regexp.html">Ruby documentation on Regexp</a></li>
				<li><a href = "http://rubular.com/">Rubular</a></li>
				<li><a href = "https://www.bluebox.net/insight/blog-article/using-regular-expressions-in-ruby-part-1-of-3">Using Regular Expressions in Ruby</a></li>
				<li><a href = "http://www.regular-expressions.info/ruby.html">Regular Expressions Info</a></li>
				<li><a href = "http://ruby.bastardsbook.com/chapters/regexes/">Bastards Book of Ruby</a></li>
			</ul>

		
</div>


    <footer>
  <div id = "left">Contact me: <a href="mailto:cvong47@gmail.com">Email</a></div>
  <div id = "right">&copy;2014 Catherine Vongsathorn</div>
</footer>

  </body>
</html>
