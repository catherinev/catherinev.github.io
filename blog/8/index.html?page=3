<!DOCTYPE html>
<html>
  <head>
    <title>Catheine V</title>
    <link data-turbolinks-track="true" href="/assets/reset.css" media="all" rel="stylesheet" />
<link data-turbolinks-track="true" href="/assets/style.css" media="all" rel="stylesheet" />
<link data-turbolinks-track="true" href="/assets/application.css" media="all" rel="stylesheet" />
    <link href='http://fonts.googleapis.com/css?family=Gafata' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Roboto:300italic,300,500' rel='stylesheet' type='text/css'>
  </head>

  <body>
    <h1>Catherine Vongsathorn</h1>
    <script src="/assets/jquery.js"></script>
<script src="/assets/jquery_ujs.js"></script>
<script src="/assets/turbolinks.js"></script>
<script src="/assets/highlightNav.js"></script>
<script src="/assets/application.js"></script>
<div class = "nav">
  <button id = "menu-icon">menu</button>
  <div><a href="/">Home</a></div>
  <div><a href="/about/">About</a></div>
  <div><a href="/blog/">Blog</a></div>
  <div><a href="/experience/">Experience</a></div>
  <div><a href="/links/">Links</a></div>
</div>

    
    <div id = "sp">
  <h4>Recent Posts</h4>
  <ul>
    <li><a href="/blog/23/">My First Rails App!</a></li>
    <li><a href="/blog/22/">Group Projects</a></li>
    <li><a href="/blog/21/">Some reflections on Phase 2</a></li>
    <li><a href="/blog/20/">Reflections on Week 2</a></li>
    <li><a href="/blog/18/">More Reflections on Week 1</a></li>
    <li><a href="/blog/17/">Day 5</a></li>
    <li><a href="/blog/16/">Day 1</a></li>
    <li><a href="/blog/15/">Regular Expressions</a></li>
    <li><a href="/blog/14/">Reflections on Feedback</a></li>
    <li><a href="/blog/13/">Sorting</a></li>
    <li><a href="/blog/12/">Chefs in the Kitchen</a></li>
    <li><a href="/blog/11/">SQL versus NoSQL</a></li>
    <li><a href="/blog/10/">Affirmation and Stereotype Threat</a></li>
    <li><a href="/blog/9/">Object-Oriented Programming versus Functional Programming</a></li>
    <li><a href="/blog/8/">Classes in Ruby</a></li>
    <li><a href="/blog/7/">Computer Science Education</a></li>
    <li><a href="/blog/6/">Dealing with Conflict</a></li>
    <li><a href="/blog/5/"><codein>#map</codein> in Ruby</a></li>
    <li><a href="/blog/4/">Pairing and Group Work</a></li>
    <li><a href="/blog/3/">What are the various ways to loop in Ruby and how can you decide which is best to use?</a></li>
    <li><a href="/blog/19/">Why is JavaScript so popular in web development?</a></li>
    <li><a href="/blog/2/">Some of my values</a></li>
    <li><a href="/blog/1/">Serious Eats</a></li>
  </ul>
</div>


  <h2>Saturday, May 3, 2014</h2>
  <div class = "minipost">
    <h3><a href="/blog/12/">Chefs in the Kitchen</a></h3>
    <p>This week, our cohort watched a video lecture/Q&A given by Shereef Bishay, one of the founders of Dev Bootcamp. The video gave some insight into the culture at DBC and outlined broad expectations for its students. There were two key points made during the lecture that particularly resonated with me: that each of us is in charge of our own success and that we shouldn't compare ourselves to others. Both of these points are valuable beyond just DBC, but I'll reflect on them just in the context of the upcoming program.</p>

    <p>Shereef's metaphor of the "kitchen" (you make your food) versus "restaurant" (you order your food) was primarily valuable because it clearly outlined the expectations for us as students. Knowing that we are expected to take charge of our own education makes it easier for us all to do so. I find comfort knowing that I can make decisions to spend more or less time on topics depending on how valuable I think they will be. In fact, during Phase 0 I have sometimes found myself spending less time on certain topics or assignments that seemed less valuable to my education. Shereef's comments in the video make me feel more confident making those decisions.  &nbsp;&nbsp;<a class="rm" href="/blog/12/">read more&nbsp;&raquo;</a></p>
  </div>
  <h2>Sunday, April 27, 2014</h2>
  <div class = "minipost">
    <h3><a href="/blog/11/">SQL versus NoSQL</a></h3>
    <h4>Relational Databases</h4>
    <p>SQL has been around since the 1970s and is the language used to communicate with
        <em>relational databases</em>. In a relational database, data is stored in tables that may be linked to each other. Each row (or record) of a table contains a data set representing a single item, and each column (or attribute) is a category that labels the elements in the rows. SQL is used to update and retrieve data in relational databases.</p>
    <p>There are many advantages to using a relational database to store data. For one, relational databases and SQL have been around for decades, so the technology is mature and many people have significant experience working with them. They are also great for working with structured data (meaning that the attributes, or columns, being recorded aren't going to change) and datasets that aren't likely to suddenly expand. For instance, a patient or client management database, an HR database, and a library catalog can all be managed easily and effectively with a relational database.  &nbsp;&nbsp;<a class="rm" href="/blog/11/">read more&nbsp;&raquo;</a></p>
  </div>
  <h2>Tuesday, April 22, 2014</h2>
  <div class = "minipost">
    <h3><a href="/blog/10/">Affirmation and Stereotype Threat</a></h3>
    <p>One reason I haven't felt particularly threatened by stereotypes is that I value personal achievement, improvement, and challenge above what other people think of me. Thus, it's easy to disregard stereotypes in favor of more objective measures of my ability and potential.</p>
    <p>I also strongly value the close relationships I have with others. During times of stress, I find comfort in such relationships not because of any encouraging words or favorable opinions but rather because of the shared experiences, closeness, and comfort they provide. I have been able to work through some of my most trying moments by helping others work through their own challenges and achieve their own successes.  &nbsp;&nbsp;<a class="rm" href="/blog/10/">read more&nbsp;&raquo;</a></p>
  </div>
  <h2>Sunday, April 20, 2014</h2>
  <div class = "minipost">
    <h3><a href="/blog/9/">Object-Oriented Programming versus Functional Programming</a></h3>
    <h4>An example in Ruby</h4>
    <div class="indent">
        <p>Before we talk about "object-oriented programming" versus "functional programming", let's look at an example. Suppose I'd like to be able to find the perimeter of rectangles, circles, and triangles. One way to acheive this is by using classes. I can make classes for Rectangles, Circles, and Triangles and include a method within each one that will evaluate the perimeter of a particular instance of that class:</p>
        <code>
            <span class="grey">1</span>&nbsp;class Rectangle
            <br/>
            <span class="grey">2</span>&nbsp;&nbsp;&nbsp;def initialize(length, width)
            <br/>
            <span class="grey">3</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@width = width
            <br/>
            <span class="grey">4</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@length = length
            <br/>
            <span class="grey">5</span>&nbsp;&nbsp;&nbsp;end
            <br/>

            <span class="grey">6</span>&nbsp;&nbsp;&nbsp;def perimeter
            <br/>
            <span class="grey">7</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 * @width + 2 * @length
            <br/>
            <span class="grey">8</span>&nbsp;&nbsp;&nbsp;end
            <br/>
            <span class="grey">9</span>&nbsp;end
            <br/>
            <br/>
            <span class="grey">10</span>class Circle
            <br/>
            <span class="grey">11</span>&nbsp;&nbsp;def initialize(radius)
            <br/>
            <span class="grey">12</span>&nbsp;&nbsp;&nbsp;&nbsp;@radius = radius
            <br/>
            <span class="grey">13</span>&nbsp;&nbsp;end
            <br/>

            <span class="grey">14</span>&nbsp;&nbsp;def perimeter
            <br/>
            <span class="grey">15</span>&nbsp;&nbsp;&nbsp;&nbsp;2 * 3.14 * @radius
            <br/>
            <span class="grey">16</span>&nbsp;&nbsp;end
            <br/>
            <span class="grey">17</span>end
            <br/>
            <br/>
            <span class="grey">18</span>class Triangle
            <br/>
            <span class="grey">19</span>&nbsp;&nbsp;def initialize(side1, side2, side3)
            <br/>
            <span class="grey">20</span>&nbsp;&nbsp;&nbsp;&nbsp;@side1 = side1
            <br/>
            <span class="grey">21</span>&nbsp;&nbsp;&nbsp;&nbsp;@side2 = side2
            <br/>
            <span class="grey">22</span>&nbsp;&nbsp;&nbsp;&nbsp;@side3 = side3
            <br/>
            <span class="grey">23</span>&nbsp;&nbsp;end
            <br/>

            <span class="grey">24</span>&nbsp;&nbsp;def perimeter
            <br/>
            <span class="grey">25</span>&nbsp;&nbsp;&nbsp;&nbsp;@side1 + @side2 + @side3
            <br/>
            <span class="grey">26</span>&nbsp;&nbsp;end
            <br/>
            <span class="grey">27</span>end
            <br/>
            <br/>
            <span class="grey">28</span>rect = Rectangle.new(2, 4)
            <br/>
            <span class="grey">29</span>circ = Circle.new(3)
            <br/>
            <span class="grey">30</span>tri = Triangle.new(1, 2, 3)
            <br/>
            <br/>
            <span class="grey">31</span>rect.perimeter
            <br/>
            <span class="grey">32</span>circ.perimeter
            <br/>
            <span class="grey">33</span>tri.perimeter
            <br/>
        </code>
        <p>On lines 1-27 above, each class has been defined and includes a
            <codein>#perimeter</codein> method. On lines 28-30, variables have been assigned to an
            <em>instance</em>of each class. And finally, on lines 31-33, the perimeter of each instance is calculated.</p></div>  &nbsp;&nbsp;<a class="rm" href="/blog/9/">read more&nbsp;&raquo;</a></p>
  </div>
  <h2>Sunday, April 13, 2014</h2>
  <div class = "minipost">
    <h3><a href="/blog/8/">Classes in Ruby</a></h3>
    <p>
        <em>Classes</em>are a natural way to group similar types of objects in Ruby. For example,
        <codein>Array</codein> is a class. There are two ways to define a new object in the class
        <codein>Array</codein> :
        <code>
            arr_1 = Array.new</br>
            arr_1[0] = "Hello"</br>
            arr_1[1] = "world"</br>
            arr_2 = [1, 2, 3, 4]
        </code>
        <codein>arr_1</codein> has been defined using constructor notation and
        <codein>arr_2</codein> has been defined using literal notation, but both are the same type of object.
        <codein>arr_1</codein> and
        <codein>arr_2</codein> are called
        <em>instances</em>of the class
        <codein>Array</codein>. So a class is a category, and an instance is a particular object that falls into that category. Other examples of classes are
        <codein>String, Fixnum, Float,</codein> and
        <codein>Hash</codein>.</p>

    <p>So why are classes helpful? Because we often want to know similar things or perform similar tasks on objects in the same class. Each class has associated
        <em>methods</em>that do something to an instance of the class. For example,
        <codein>#length, #each,</codein> and
        <codein>#sort</codein> are all methods associated with the class
        <codein>Array</codein>. Similarly,
        <codein>#length, #downcase,</codein> and
        <codein>#each_char</codein> are all methods associated with the class
        <codein>String</codein>. Each of these methods can be called on any instance of the associated class. (Note that some methods are associated with more than one class.)  &nbsp;&nbsp;<a class="rm" href="/blog/8/">read more&nbsp;&raquo;</a></p>
  </div>

<div class="pagination"><a class="previous_page" rel="prev" href="/blog/8/?page=2">&#8592; Previous</a> <a class="next_page" rel="next" href="/blog/8/?page=4">Next &#8594;</a></div>


    <footer>
  <div id = "left">Contact me: <a href="mailto:cvong47@gmail.com">Email</a></div>
  <div id = "right">&copy;2014 Catherine Vongsathorn</div>
</footer>


  </body>
</html>
